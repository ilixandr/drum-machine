{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mp3s","soundDrums","name","keyCode","keyTrigger","source","soundPiano","Buttons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buttonState","playSound","bind","assertThisInitialized","handleKeyPress","highlightPad","document","addEventListener","removeEventListener","event","setState","_this2","sound","getElementById","currentTime","play","setTimeout","updateDisplay","soundName","replace","react_default","a","createElement","id","onClick","className","src","Component","DrumMachine","_this3","display","currentSoundSet","currentSoundName","selectorButton","displayClipName","selectSoundSet","clipName","_this4","buttons","map","initVal","i","buttonsArray","App_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcf3d2d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n/* Define global constants */\nconst soundInitialTime = 0;\nconst mp3s = [\n  [\n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  ], \n  [\n    \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\", \n    \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"\n  ]\n];\nconst soundDrums = [\n  {\n    name: \"Heater-1\",\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    source: mp3s[0][0]\n  }, \n  {\n    name: \"Heater-2\",\n    keyCode: 87,\n    keyTrigger: \"W\",\n    source: mp3s[0][1]\n  }, \n  {\n    name: \"Heater-3\",\n    keyCode: 69,\n    keyTrigger: \"E\",\n    source: mp3s[0][2]\n  }, {\n    name: \"Heater-4\",\n    keyCode: 65,\n    keyTrigger: \"A\",\n    source: mp3s[0][3]\n  }, \n  {\n    name: \"Heater-6\",\n    keyCode: 83,\n    keyTrigger: \"S\",\n    source: mp3s[0][4]\n  }, \n  {\n    name: \"Dsc-Oh\",\n    keyCode: 68,\n    keyTrigger: \"D\",\n    source: mp3s[0][5]\n  }, \n  {\n    name: \"Kick-n-Hat\",\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    source: mp3s[0][6]\n  }, \n  {\n    name: \"RP4-Kick\",\n    keyCode: 88,\n    keyTrigger: \"X\",\n    source: mp3s[0][7]\n  }, \n  {\n    name: \"Cev-H2\",\n    keyCode: 67,\n    keyTrigger: \"C\",\n    source: mp3s[0][8]\n  }\n];\nconst soundPiano = [\n  {\n    name: \"Chord-1\",\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    source: mp3s[1][0]\n  }, \n  {\n    name: \"Chord-2\",\n    keyCode: 87,\n    keyTrigger: \"W\",\n    source: mp3s[1][1]\n  }, \n  {\n    name: \"Chord-3\",\n    keyCode: 69,\n    keyTrigger: \"E\",\n    source: mp3s[1][2]\n  }, \n  {\n    name: \"Give-us-a-light\",\n    keyCode: 65,\n    keyTrigger: \"A\",\n    source: mp3s[1][3]\n  }, \n  {\n    name: \"Dry-Ohh\",\n    keyCode: 83,\n    keyTrigger: \"S\",\n    source: mp3s[1][4]\n  }, \n  {\n    name: \"Bld-H1\",\n    keyCode: 68,\n    keyTrigger: \"D\",\n    source: mp3s[1][5]\n  }, \n  {\n    name: \"Punchy-Kick\",\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    source: mp3s[1][6]\n  }, \n  {\n    name: \"Side-stick\",\n    keyCode: 88,\n    keyTrigger: \"X\",\n    source: mp3s[1][7]\n  },   \n  {\n    keyCode: 67,\n    keyTrigger: \"C\",\n    name: \"Brk-Snr\",\n    source: mp3s[1][8]\n  }\n];\n\n/* Build components */\nclass Buttons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {buttonState: \"inactivePad\"};\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.highlightPad = this.highlightPad.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === this.props.keyCode) {\n      this.playSound();\n    }\n  }\n  highlightPad() {\n    this.state.buttonState === \"activePad\" ? this.setState({buttonState: \"inactivePad\"}) : this.setState({buttonState: \"activePad\"});\n  }\n  playSound() {\n    let sound = document.getElementById(this.props.keyTrigger);\n    sound.currentTime = soundInitialTime;\n    sound.play();\n    this.highlightPad();\n    setTimeout(() => this.highlightPad(), 150);\n    this.props.updateDisplay(this.props.soundName.replace(/-/g, \" \"));\n  }\n  render() {\n    return (\n      <button id={this.props.soundName} onClick={this.playSound} className={\"drum-pad \" + this.state.buttonState} >\n        <audio className=\"clip\" id={this.props.keyTrigger} src={this.props.sound}></audio>\n        {this.props.keyTrigger}\n      </button>\n    );\n  }\n};\n\nclass DrumMachine extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"\",\n      currentSoundSet: soundDrums,\n      currentSoundName: \"Drum Sounds\",\n      selectorButton: \"selector-drums\"\n    }\n    this.displayClipName = this.displayClipName.bind(this);\n    this.selectSoundSet = this.selectSoundSet.bind(this);\n  }\n  selectSoundSet() {\n    this.state.currentSoundName === \"Drum Sounds\" ? this.setState({currentSoundSet: soundPiano, display: \"Piano Sounds\", currentSoundName: \"Piano Sounds\", selectorButton: \"selector-piano\"}) : this.setState({currentSoundSet: soundDrums, display: \"Drum Sounds\", currentSoundName: \"Drum Sounds\", selectorButton: \"selector-drums\"});\n  }\n  displayClipName(clipName) {\n    this.setState({display: clipName});\n  }\n  render() {\n    let buttons = this.state.currentSoundSet.map((initVal, i, buttonsArray) => {\n      return (\n        <Buttons soundName={buttonsArray[i].name} sound={buttonsArray[i].source} keyTrigger={buttonsArray[i].keyTrigger} keyCode={buttonsArray[i].keyCode} updateDisplay={this.displayClipName} />\n        )\n      });\n    return (\n      <div id=\"container\">\n        <div id=\"pads\">{buttons}</div>\n        <div id=\"selectors\">\n          \n          <div id=\"sound-selector\">\n            <p className=\"sound-selector-p\">Sound Set</p>\n            <div id=\"selector-button\" onClick={this.selectSoundSet}>\n              <div id={this.state.selectorButton}>\n                <i className={this.state.selectorButton === \"selector-drums\" ? \"fas fa-drum\" : \"fas fa-memory\"}></i>\n              </div>\n            </div>\n          </div>\n          <div id=\"display\">\n            {this.state.display}\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default DrumMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DrumMachine from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DrumMachine />, document.getElementById('drum-machine'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}